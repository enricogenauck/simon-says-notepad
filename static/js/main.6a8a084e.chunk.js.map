{"version":3,"sources":["_components/diamond/diamondButton.js","_components/diamond/diamond.js","_components/entry/entry.js","_components/column/column.js","_components/menu/menu.js","App.js","serviceWorker.js","index.js"],"names":["DiamondButton","_ref","addEntry","color","position","react_default","a","createElement","className","onClick","Diamond","diamondButton","Entry","removeEntry","Column","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","entries","bind","assertThisInitialized","new_entries","concat","setState","slice","splice","_this2","map","entry","i","_components_entry_entry","key","react_transition_group","transitionName","transitionEnterTimeout","transitionLeaveTimeout","diamond_diamond","Component","withStyles","root","flexGrow","grow","menuButton","marginLeft","marginRight","classes","resetCallback","AppBar_default","Toolbar_default","Typography_default","variant","Button_default","App","columnCount","columnRefs","emptyColumns","ref","current","purgeEntries","console","log","columns","React","createRef","push","column_column","menu","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6a8a084e.chunk.js","sourcesContent":["import React from 'react';\n\nfunction DiamondButton({addEntry, color, position}) {\n  return (\n    <button className={'diamond-button-'+ position + ' ' + color}\n            onClick={() => addEntry(color)}>\n    </button>\n  );\n}\n\nexport default DiamondButton;\n","import React from 'react';\n\nimport DiamondButton from './diamondButton';\nimport './diamond.css';\n\nfunction Diamond({addEntry}) {\n  return (\n    <div className=\"diamond\">\n      <div className=\"diamond-button-wrapper\">\n        <DiamondButton color='blue'   position='1' addEntry={addEntry} />\n        <DiamondButton color='yellow' position='2' addEntry={addEntry} />\n        <DiamondButton color='green'  position='3' addEntry={addEntry} />\n        <DiamondButton color='red'    position='4' addEntry={addEntry} />\n      </div>\n    </div>\n  );\n}\n\nexport default Diamond;\n","import React from 'react';\n\nimport './entry.css';\n\nconst Entry = ({color, position, removeEntry}) => {\n  return (\n    <div\n      className={color + ' entry'}\n      onClick={() => removeEntry(position)}>\n    </div>\n  );\n}\n\nexport default Entry;\n","import React, { Component } from 'react';\nimport { CSSTransitionGroup } from 'react-transition-group';\n\nimport Diamond from '../diamond/diamond';\nimport './column.css';\n\nimport Entry from '../entry/entry';\n\nclass Column extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state       = { entries: [] };\n    this.addEntry    = this.addEntry.bind(this);\n    this.removeEntry = this.removeEntry.bind(this);\n  }\n\n  addEntry(color) {\n    const new_entries = this.state.entries.concat([color]);\n\n    this.setState({entries: new_entries});\n  }\n  removeEntry(position) {\n    let new_entries = this.state.entries.slice();\n    new_entries.splice(position, 1);\n\n    this.setState({entries: new_entries});\n  }\n  purgeEntries() {\n    this.setState({entries: []});\n  }\n\n  render() {\n    const entries = this.state.entries.map((entry, i) => (\n      <Entry key={i}\n             color={entry}\n             position={i}\n             removeEntry={this.removeEntry} />\n    ));\n\n    return (\n      <div className=\"column\">\n        <CSSTransitionGroup\n          transitionName=\"column-entry\"\n          transitionEnterTimeout={200}\n          transitionLeaveTimeout={200}>\n            { entries }\n        </CSSTransitionGroup>\n\n        <div className=\"column-diamond-container\">\n          <Diamond addEntry={this.addEntry} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Column;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nconst styles = {\n  root: {\n    flexGrow: 1,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20,\n  },\n};\n\nfunction Menu(props) {\n  const { classes, resetCallback } = props;\n  return (\n    <div className={classes.root}>\n      <AppBar>\n        <Toolbar>\n          <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\n            Simon Says Notepad\n          </Typography>\n          <Button color=\"inherit\" onClick={() => resetCallback()} >Reset</Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n\nMenu.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Menu);","import React, { Component } from 'react';\n\nimport './App.css';\n\nimport Column from './_components/column/column.js';\nimport Menu from './_components/menu/menu.js';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columnCount: 3\n    };\n\n    this.columnRefs = [];\n    this.emptyColumns = this.emptyColumns.bind(this);\n  }\n\n  emptyColumns() {\n    this.columnRefs.map((ref) => ref.current.purgeEntries());\n    console.log(this.columnRefs);\n  }\n\n  render() {\n    var columns=[];\n    for(var i=0;i<this.state.columnCount;i++){\n      var ref = React.createRef();\n      this.columnRefs.push(ref);\n\n      columns.push(<Column key={i} ref={ref} />);\n    }\n\n    return (\n      <div className=\"App\">\n        <Menu resetCallback={this.emptyColumns} />\n        <div className=\"columns-container\">\n          {columns}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}