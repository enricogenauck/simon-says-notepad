{"version":3,"sources":["_components/diamond/diamondButton.js","_components/diamond/diamond.js","_components/entry/entry.js","_components/column/column.js","App.js","serviceWorker.js","index.js"],"names":["DiamondButton","_ref","addEntry","color","position","react_default","a","createElement","className","onMouseDown","onTouchStart","Diamond","diamondButton","Entry","removeEntry","Column","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","entries","bind","assertThisInitialized","new_entries","concat","setState","slice","splice","_this2","map","entry","i","_components_entry_entry","key","react_transition_group","transitionName","transitionEnterTimeout","transitionLeaveTimeout","diamond_diamond","Component","App","columnCount","columns","push","column_column","AppBar_default","Toolbar_default","Typography_default","variant","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7b4d10b5.chunk.js","sourcesContent":["import React from 'react';\n\nfunction DiamondButton({addEntry, color, position}) {\n  return (\n    <button className={'diamond-button-'+ position + ' ' + color}\n            onMouseDown={() => addEntry(color)}\n            onTouchStart={() => addEntry(color)}>\n    </button>\n  );\n}\n\nexport default DiamondButton;\n","import React from 'react';\n\nimport DiamondButton from './diamondButton';\nimport './diamond.css';\n\nfunction Diamond({addEntry}) {\n  return (\n    <div className=\"diamond\">\n      <div className=\"diamond-button-wrapper\">\n        <DiamondButton color='blue'   position='1' addEntry={addEntry} />\n        <DiamondButton color='yellow' position='2' addEntry={addEntry} />\n        <DiamondButton color='green'  position='3' addEntry={addEntry} />\n        <DiamondButton color='red'    position='4' addEntry={addEntry} />\n      </div>\n    </div>\n  );\n}\n\nexport default Diamond;\n","import React from 'react';\n\nimport './entry.css';\n\nconst Entry = ({color, position, removeEntry}) => {\n  return (\n    <div\n      className={color + ' entry'}\n      onMouseDown={() => removeEntry(position)}\n      onTouchStart={() => removeEntry(position)}>\n    </div>\n  );\n}\n\nexport default Entry;\n","import React, { Component } from 'react';\nimport { CSSTransitionGroup } from 'react-transition-group';\n\nimport Diamond from '../diamond/diamond';\nimport './column.css';\n\nimport Entry from '../entry/entry';\n\nclass Column extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state       = { entries: [] };\n    this.addEntry    = this.addEntry.bind(this);\n    this.removeEntry = this.removeEntry.bind(this);\n  }\n\n  addEntry(color) {\n    const new_entries = this.state.entries.concat([color]);\n\n    this.setState({entries: new_entries});\n  }\n  removeEntry(position) {\n    let new_entries = this.state.entries.slice();\n    new_entries.splice(position, 1);\n\n    this.setState({entries: new_entries});\n  }\n\n  render() {\n    const entries = this.state.entries.map((entry, i) => (\n      <Entry key={i}\n             color={entry}\n             position={i}\n             removeEntry={this.removeEntry} />\n    ));\n\n    return (\n      <div className=\"column\">\n        <CSSTransitionGroup\n          transitionName=\"column-entry\"\n          transitionEnterTimeout={500}\n          transitionLeaveTimeout={300}>\n            { entries }\n        </CSSTransitionGroup>\n\n        <div className=\"column-diamond-container\">\n          <Diamond addEntry={this.addEntry} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Column;\n","import React, { Component } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nimport './App.css';\n\nimport Column from './_components/column/column.js';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columnCount: 1\n    };\n  }\n\n  render() {\n    var columns=[];\n    for(var i=0;i<this.state.columnCount;i++){\n      columns.push(<Column key={i} />);\n    }\n\n    return (\n      <div className=\"App\">\n        <AppBar>\n          <Toolbar>\n             <Typography variant=\"title\" color=\"inherit\">\n               Simon Says - Notepad\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <div className=\"columns-container\">\n          {columns}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}